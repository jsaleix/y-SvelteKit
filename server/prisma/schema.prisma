// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  email String @unique
  username String @unique
  displayName String @default("Anon")
  password String
  avatar String @default("/assets/default-pp.jpg")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isPrivate Boolean @default(false)
  roles Role[] @default([USER])
  tweets Tweet[]
  likes Like[]
  bookmarks Bookmark[]
  followers Following[] @relation("Followers")
  following Following[] @relation("Following")
  notifications Notification[] @relation("ToNotify")
  notificationsCreated Notification[] @relation("Author")
}

model Tweet {
  id String @id @default(uuid())
  content String
  createdAt DateTime @default(now())
  creatorId String
  creator User @relation(fields: [creatorId], references: [id])
  likes Like[]
  media String?
  mediaType MediaType?
  bookmarks Bookmark[]
  retweetOf String?
  retweet Tweet? @relation("Retweet", fields: [retweetOf], references: [id])
  retweets Tweet[] @relation("Retweet")
  replyTo String?
  reply Tweet? @relation("ReplyToTweet", fields: [replyTo], references: [id])
  replies Tweet[] @relation("ReplyToTweet")
  notifications Notification[] @relation("Tweet")
}

model Like {
  id String @id @default(uuid())
  tweetId String
  tweet Tweet @relation(fields: [tweetId], references: [id])
  userId String
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Bookmark {
  id String @id @default(uuid())
  tweetId String
  tweet Tweet @relation(fields: [tweetId], references: [id])
  userId String
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Following {
  id String @id @default(uuid())
  followerId String
  follower User @relation("Following", fields: [followerId], references: [id])
  followedId String
  followed User @relation("Followers", fields: [followedId], references: [id])
  createdAt DateTime @default(now())
}

model Notification {
  id String @id @default(uuid())
  toNotifyId String
  toNotify User @relation("ToNotify", fields: [toNotifyId], references: [id])
  type NotificationType
  tweetId String?
  tweet Tweet? @relation("Tweet", fields: [tweetId], references: [id])
  authorId String?
  author User? @relation("Author", fields: [authorId], references: [id])
  read Boolean @default(false)
  createdAt DateTime @default(now())
}

enum Role {
  USER
  ADMIN
  BLUE
}

enum NotificationType {
  LIKE
  REPLY
  FOLLOW
  MENTION
  RETWEET
}

enum MediaType {
  IMAGE
}